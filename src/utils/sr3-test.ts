// Simple test script for SR3 parser
import { parseSr3File, extractMaxForce } from './sr3Parser';

// Sample data from a real SR3 file
const sampleData = `DATE: 02/05/2024;
TIME: 14:43:19;
DIGITAL ID: 682719A70CB5;
MACHINE ID: 23700923;
SPECIMEN ID: #110;
TEST NUMBER: 1;
OPERATOR: Operator;
PROFILE NAME: Viga 150*150*500;
TYPE TEST: FLEXURE;
SPECIMEN: BEAM;
l: [mm] 500.0;
h: [mm] 150.0;
b: [mm] 150.0;
Rollers Dist. [mm] 450.0;
EXTRA INFO: TWO-POINT;
AREA: 7500.0 mm≤;
WEIGHT: 26 gr;
AGE: 28 DAYS;
TEST SPEED 1: 0.16 Kg/cm≤/s;
TEST MANAGEMENT: AUTOMATIC;
MAX LOAD: 2.9599 tf;
STRENGTH: 39.46500 kg/cm≤;
TEST DURATION: 115 Sec;
TEST SPEED: 0.16 Kg/cm≤/s;
PEAK: 1.0000 tf;
PID PROFILE: 3;
CHANNEL: 2;
FULL SCALE: 15.2957 tf;
UNIT OF MEASURE: tf;
DATA INTERVAL: 250 mSec;
READINGS: 632;
OVERSAMPLING START: 460;
OVERSAMPLING READINGS: 173;
                                                                                                                    1.5328; 1.5864; 1.6923; 1.6929; 1.6823; 1.6739; 1.6676; 1.6623; 1.6578; 1.6538; 1.6500; 1.6467; 1.6457; 1.6441; 1.6433; 1.6412; 1.6456; 1.6422; 1.6448; 1.6434; 1.6427; 1.6442; 1.6464; 1.6464; 1.6511; 1.6486; 1.6549; 1.6520; 1.6606; 1.6580; 1.6650; 1.6622; 1.6711; 1.6688; 1.6749; 1.6729; 1.6786; 1.6771; 1.6820; 1.6843; 1.6902; 1.6933; 1.6946; 1.7019; 1.7026; 1.7083; 1.7094; 1.7122; 1.7129; 1.7216; 1.7186; 1.7250; 1.7253; 1.7324; 1.7335; 1.7375; 1.7392; 1.7413; 1.7423; 1.7510; 1.7484; 1.7547; 1.7550; 1.7620; 1.7624; 1.7654; 1.7638; 1.7707; 1.7690; 1.7790; 1.7778; 1.7819; 1.7853; 1.7899; 1.7916; 1.7956; 1.7967; 1.8031; 1.8031; 1.8090; 1.8074; 1.8130; 1.8148; 1.8208; 1.8209; 1.8233; 1.8308; 1.8311; 1.8353; 1.8356; 1.8411; 1.8385; 1.8464; 1.8439; 1.8511; 1.8485; 1.8561; 1.8545; 1.8652; 1.8623; 1.8724; 1.8694; 1.8802; 1.8778; 1.8832; 1.8824; 1.8902; 1.8893; 1.8936; 1.8936; 1.8980; 1.8998; 1.9055; 1.9066; 1.9097; 1.9132; 1.9169; 1.9191; 1.9245; 1.9266; 1.9294; 1.9323; 1.9359; 1.9374; 1.9385; 1.9443; 1.9422; 1.9533; 1.9506; 1.9588; 1.9560; 1.9644; 1.9615; 1.9699; 1.9675; 1.9742; 1.9729; 1.9832; 1.9804; 1.9869; 1.9850; 1.9959; 1.9932; 2.0018; 1.9993; 2.0056; 2.0037; 2.0128; 2.0105; 2.0176; 2.0155; 2.0245; 2.0227; 2.0277; 2.0270; 2.0340; 2.0342; 2.0422; 2.0399; 2.0501; 2.0471; 2.0573; 2.0552; 2.0605; 2.0587; 2.0694; 2.0664; 2.0756; 2.0725; 2.0793; 2.0777; 2.0873; 2.0857; 2.0906; 2.0898; 2.0986; 2.0963; 2.1053; 2.1022; 2.1104; 2.1074; 2.1178; 2.1151; 2.1190; 2.1220; 2.1229; 2.1314; 2.1286; 2.1369; 2.1345; 2.1401; 2.1388; 2.1498; 2.1472; 2.1546; 2.1518; 2.1627; 2.1601; 2.1643; 2.1665; 2.1675; 2.1786; 2.1753; 2.1847; 2.1820; 2.1889; 2.1896; 2.1921; 2.1923; 2.1967; 2.1960; 2.2049; 2.2031; 2.2087; 2.2089; 2.2113; 2.2203; 2.2175; 2.2261; 2.2235; 2.2300; 2.2304; 2.2364; 2.2335; 2.2425; 2.2403; 2.2475; 2.2448; 2.2527; 2.2499; 2.2576; 2.2559; 2.2675; 2.2645; 2.2746; 2.2715; 2.2820; 2.2790; 2.2861; 2.2833; 2.2927; 2.2902; 2.2967; 2.2971; 2.3010; 2.3018; 2.3103; 2.3136; 2.3155; 2.3201; 2.3196; 2.3253; 2.3236; 2.3298; 2.3274; 2.3368; 2.3342; 2.3423; 2.3394; 2.3467; 2.3439; 2.3569; 2.3569; 2.3608; 2.3579; 2.3671; 2.3645; 2.3712; 2.3687; 2.3778; 2.3747; 2.3855; 2.3826; 2.3897; 2.3873; 2.3925; 2.3944; 2.4032; 2.4023; 2.4088; 2.4069; 2.4144; 2.4117; 2.4202; 2.4173; 2.4273; 2.4282; 2.4325; 2.4347; 2.4354; 2.4376; 2.4462; 2.4432; 2.4506; 2.4476; 2.4551; 2.4523; 2.4622; 2.4594; 2.4664; 2.4637; 2.4746; 2.4716; 2.4792; 2.4766; 2.4846; 2.4864; 2.4896; 2.4921; 2.4940; 2.4975; 2.4990; 2.5052; 2.5059; 2.5085; 2.5144; 2.5170; 2.5187; 2.5236; 2.5228; 2.5279; 2.5301; 2.5378; 2.5367; 2.5438; 2.5414; 2.5509; 2.5474; 2.5573; 2.5542; 2.5642; 2.5660; 2.5676; 2.5693; 2.5716; 2.5718; 2.5797; 2.5766; 2.5856; 2.5828; 2.5919; 2.5927; 2.5973; 2.5977; 2.6018; 2.6033; 2.6080; 2.6083; 2.6124; 2.6131; 2.6169; 2.6206; 2.6211; 2.6291; 2.6275; 2.6358; 2.6337; 2.6409; 2.6393; 2.6432; 2.6489; 2.6546; 2.6550; 2.6574; 2.6598; 2.6629; 2.6675; 2.6717; 2.6734; 2.6772; 2.6790; 2.6840; 2.6848; 2.6875; 2.6901; 2.6953; 2.6943; 2.7008; 2.6988; 2.7035; 2.7107; 2.7139; 2.7158; 2.7165; 2.7235; 2.7208; 2.7263; 2.7265; 2.7305; 2.7349; 2.7391; 2.7409; 2.7457; 2.7462; 2.7486; 2.7583; 2.7588; 2.7638; 2.7666; 2.7690; 2.7740; 2.7736; 2.7763; 2.7802; 2.7849; 2.7839; 2.7907; 2.7875; 2.7949; 2.7932; 2.8041; 2.8004; 2.8109; 2.8075; 2.8181; 2.8189; 2.8199; 2.8213; 2.8276; 2.8279; 2.8298; 2.8300; 2.8342; 2.8338; 2.8433; 2.8410; 2.8495; 2.8460; 2.8575; 2.8540; 2.8647; 2.8648; 2.8676; 2.8726; 2.8718; 2.8780; 2.8746; 2.8813; 2.8803; 2.8898; 2.8885; 2.8922; 2.8956; 2.8984; 2.8997; 2.9027; 2.9033; 2.9100; 2.9085; 2.9183; 2.9158; 2.9215; 2.9266; 2.9309; 2.9347; 2.9377; 2.9402; 2.9423; 2.9511; 2.9514; 2.9433; 2.9447; 2.9447; 2.9461; 2.9461; 2.9474; 2.9474; 2.9487; 2.9487; 2.9497; 2.9497; 2.9505; 2.9505; 2.9511; 2.9511; 2.9514; 2.9514; 2.9514; 2.9514; 2.9514; 2.9514; 2.9512; 2.9512; 2.9510; 2.9510; 2.9506; 2.9506; 2.9501; 2.9501; 2.9497; 2.9497; 2.9492; 2.9492; 2.9488; 2.9488; 2.9483; 2.9483; 2.9479; 2.9479; 2.9476; 2.9476; 2.9471; 2.9471; 2.9467; 2.9467; 2.9463; 2.9463; 2.9458; 2.9458; 2.9454; 2.9454; 2.9451; 2.9451; 2.9448; 2.9448; 2.9444; 2.9444; 2.9443; 2.9443; 2.9442; 2.9442; 2.9442; 2.9442; 2.9442; 2.9442; 2.9443; 2.9443; 2.9447; 2.9447; 2.9453; 2.9453; 2.9459; 2.9459; 2.9467; 2.9467; 2.9475; 2.9475; 2.9485; 2.9485; 2.9497; 2.9497; 2.9508; 2.9508; 2.9521; 2.9521; 2.9534; 2.9534; 2.9546; 2.9546; 2.9560; 2.9560; 2.9572; 2.9572; 2.9583; 2.9583; 2.9590; 2.9590; 2.9596; 2.9596; 2.9599; 2.9599; 2.9599; 2.9599; 2.9598; 2.9598; 2.9594; 2.9594; 2.9588; 2.9588; 2.9579; 2.9579; 2.9568; 2.9568; 2.9548; 2.9548; 2.9521; 2.9521; 2.9486; 2.9486; 2.9444; 2.9444; 2.9396; 2.9396; 2.9339; 2.9339; 2.9271; 2.9271; 2.9194; 2.9194; 2.9111; 2.9111; 2.8999; 2.8999; 2.8835; 2.8835; 2.5335; 2.5335; 2.1769; 2.1769; 1.8129; 1.8129; 1.4539; 1.4539; 1.0957; 1.0957; 0.7370; 0.7370; 0.3748; 0.3748; 0.0183; 0.0183; 0.0073; 0.0073; 0.0061; 0.0061; 0.0046; 0.0046; 0.0081; 0.0081; 0.0081; 0.0081; 0.0063; 0.0063; 0.0077; 0.0077; 0.0077; 0.0077; 0.0078; 0.0078; 0.0054; 0.0054; 0.0028;ˆ˜9;
  0.000;  0.250;  0.500;  0.750;  1.000;  1.250;  1.500;  1.750;  2.000;  2.250;  2.500;  2.750;  3.000;  3.250;  3.500;  3.750;  4.000;  4.250;  4.500;  4.750;  5.000;  5.250;  5.500;  5.750;  6.000;  6.250;  6.500;  6.750;  7.000;  7.250;  7.500;  7.750;  8.000;  8.250;  8.500;  8.750;  9.000;  9.250;  9.500;  9.750; 10.000; 10.250; 10.500; 10.750; 11.000; 11.250; 11.500; 11.750; 12.000; 12.250; 12.500; 12.750; 13.000; 13.250; 13.500; 13.750; 14.000; 14.250; 14.500; 14.750; 15.000; 15.250; 15.500; 15.750; 16.000; 16.250; 16.500; 16.750; 17.000; 17.250; 17.500; 17.750; 18.000; 18.250; 18.500; 18.750; 19.000; 19.250; 19.500; 19.750; 20.000; 20.250; 20.500; 20.750; 21.000; 21.250; 21.500; 21.750; 22.000; 22.250; 22.500; 22.750; 23.000; 23.250; 23.500; 23.750; 24.000; 24.250; 24.500; 24.750; 25.000; 25.250; 25.500; 25.750; 26.000; 26.250; 26.500; 26.750; 27.000; 27.250; 27.500; 27.750; 28.000; 28.250; 28.500; 28.750; 29.000; 29.250; 29.500; 29.750; 30.000; 30.250; 30.500; 30.750; 31.000; 31.250; 31.500; 31.750; 32.000; 32.250; 32.500; 32.750; 33.000; 33.250; 33.500; 33.750; 34.000; 34.250; 34.500; 34.750; 35.000; 35.250; 35.500; 35.750; 36.000; 36.250; 36.500; 36.750; 37.000; 37.250; 37.500; 37.750; 38.000; 38.250; 38.500; 38.750; 39.000; 39.250; 39.500; 39.750; 40.000; 40.250; 40.500; 40.750; 41.000; 41.250; 41.500; 41.750; 42.000; 42.250; 42.500; 42.750; 43.000; 43.250; 43.500; 43.750; 44.000; 44.250; 44.500; 44.750; 45.000; 45.250; 45.500; 45.750; 46.000; 46.250; 46.500; 46.750; 47.000; 47.250; 47.500; 47.750; 48.000; 48.250; 48.500; 48.750; 49.000; 49.250; 49.500; 49.750; 50.000; 50.250; 50.500; 50.750; 51.000; 51.250; 51.500; 51.750; 52.000; 52.250; 52.500; 52.750; 53.000; 53.250; 53.500; 53.750; 54.000; 54.250; 54.500; 54.750; 55.000; 55.250; 55.500; 55.750; 56.000; 56.250; 56.500; 56.750; 57.000; 57.250; 57.500; 57.750; 58.000; 58.250; 58.500; 58.750; 59.000; 59.250; 59.500; 59.750; 60.000; 60.250; 60.500; 60.750; 61.000; 61.250; 61.500; 61.750; 62.000; 62.250; 62.500; 62.750; 63.000; 63.250; 63.500; 63.750; 64.000; 64.250; 64.500; 64.750; 65.000; 65.250; 65.500; 65.750; 66.000; 66.250; 66.500; 66.750; 67.000; 67.250; 67.500; 67.750; 68.000; 68.250; 68.500; 68.750; 69.000; 69.250; 69.500; 69.750; 70.000; 70.250; 70.500; 70.750; 71.000; 71.250; 71.500; 71.750; 72.000; 72.250; 72.500; 72.750; 73.000; 73.250; 73.500; 73.750; 74.000; 74.250; 74.500; 74.750; 75.000; 75.250; 75.500; 75.750; 76.000; 76.250; 76.500; 76.750; 77.000; 77.250; 77.500; 77.750; 78.000; 78.250; 78.500; 78.750; 79.000; 79.250; 79.500; 79.750; 80.000; 80.250; 80.500; 80.750; 81.000; 81.250; 81.500; 81.750; 82.000; 82.250; 82.500; 82.750; 83.000; 83.250; 83.500; 83.750; 84.000; 84.250; 84.500; 84.750; 85.000; 85.250; 85.500; 85.750; 86.000; 86.250; 86.500; 86.750; 87.000; 87.250; 87.500; 87.750; 88.000; 88.250; 88.500; 88.750; 89.000; 89.250; 89.500; 89.750; 90.000; 90.250; 90.500; 90.750; 91.000; 91.250; 91.500; 91.750; 92.000; 92.250; 92.500; 92.750; 93.000; 93.250; 93.500; 93.750; 94.000; 94.250; 94.500; 94.750; 95.000; 95.250; 95.500; 95.750; 96.000; 96.250; 96.500; 96.750; 97.000; 97.250; 97.500; 97.750; 98.000; 98.250; 98.500; 98.750; 99.000; 99.250; 99.500; 99.750;100.000;100.250;100.500;100.750;101.000;101.250;101.500;101.750;102.000;102.250;102.500;102.750;103.000;103.250;103.500;103.750;104.000;104.250;104.500;104.750;105.000;105.250;105.500;105.750;106.000;106.250;106.500;106.750;107.000;107.250;107.500;107.750;108.000;108.250;108.500;108.750;109.000;109.250;109.500;109.750;110.000;110.250;110.500;110.750;111.000;111.250;111.500;111.750;112.000;112.250;112.500;112.750;113.000;113.250;113.500;113.750;114.000;114.250;114.500;114.750;115.000;115.005;115.010;115.015;115.020;115.025;115.030;115.035;115.040;115.045;115.050;115.055;115.060;115.065;115.070;115.075;115.080;115.085;115.090;115.095;115.100;115.105;115.110;115.115;115.120;115.125;115.130;115.135;115.140;115.145;115.150;115.155;115.160;115.165;115.170;115.175;115.180;115.185;115.190;115.195;115.200;115.205;115.210;115.215;115.220;115.225;115.230;115.235;115.240;115.245;115.250;115.255;115.260;115.265;115.270;115.275;115.280;115.285;115.290;115.295;115.300;115.305;115.310;115.315;115.320;115.325;115.330;115.335;115.340;115.345;115.350;115.355;115.360;115.365;115.370;115.375;115.380;115.385;115.390;115.395;115.400;115.405;115.410;115.415;115.420;115.425;115.430;115.435;115.440;115.445;115.450;115.455;115.460;115.465;115.470;115.475;115.480;115.485;115.490;115.495;115.500;115.505;115.510;115.515;115.520;115.525;115.530;115.535;115.540;115.545;115.550;115.555;115.560;115.565;115.570;115.575;115.580;115.585;115.590;115.595;115.600;115.605;115.610;115.615;115.620;115.625;115.630;115.635;115.640;115.645;115.650;115.655;115.660;115.665;115.670;115.675;115.680;115.685;115.690;115.695;115.700;115.705;115.710;115.715;115.720;115.725;115.730;115.735;115.740;115.745;115.750;115.755;115.760;115.765;115.770;115.775;115.780;115.785;115.790;115.795;115.800;115.805;115.810;115.815;115.820;115.825;115.830;115.835;115.840;115.845;115.850;115.855;`;

// Test the parseSr3File function with debug info
try {
  console.log('Testing SR3 parser with sample data...');
  
  const result = parseSr3File(sampleData, true);
  console.log('Parser Result:');
  console.log('- Max Force:', result.maxForce, 'kg');
  console.log('- Data Points:', result.timeData.length);
  console.log('- Format Detected:', result.metadata.fileFormat);
  console.log('- Header Lines:', result.metadata.headerLines);
  
  // Check if the max force matches what's in the file
  const declaredMaxLoad = /MAX LOAD: ([\d\.]+) tf/.exec(sampleData);
  if (declaredMaxLoad && declaredMaxLoad[1]) {
    const declaredMax = parseFloat(declaredMaxLoad[1]) * 1000; // Convert tf to kg
    console.log('- Declared Max Load in file:', declaredMax, 'kg');
    console.log('- Matches parser result:', Math.abs(declaredMax - result.maxForce) < 0.1);
  }
  
  // Check direct extraction function
  const extractedMax = extractMaxForce(sampleData);
  console.log('- Extract Max Force result:', extractedMax, 'kg');
  
  // Calculate expected MR value using our formula
  const calculatedMR = (45 * result.maxForce) / 3375;
  console.log('- Calculated MR (flexural strength):', calculatedMR.toFixed(2), 'kg/cm²');
  
  // Check if it matches the strength declared in the file
  const declaredStrength = /STRENGTH: ([\d\.]+) kg\/cm/.exec(sampleData);
  if (declaredStrength && declaredStrength[1]) {
    const declaredMR = parseFloat(declaredStrength[1]);
    console.log('- Declared Strength in file:', declaredMR, 'kg/cm²');
    console.log('- Matches calculated value:', Math.abs(declaredMR - calculatedMR) < 0.5);
  }
  
  console.log('\nTest completed successfully!');
} catch (error) {
  console.error('Test failed with error:', error);
} 